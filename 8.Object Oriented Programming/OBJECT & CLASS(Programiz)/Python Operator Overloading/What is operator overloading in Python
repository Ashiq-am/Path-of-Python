You can change the meaning of an operator in Python depending upon the operands used.
This practice is known as operating overloading.
Python operators work for built-in classes. But same operator behaves differently with different types.
For example, the + operator will, perform arithmetic addition on two numbers, merge two lists and concatenate two strings.

This feature in Python, that allows same operator to have different meaning according to the context is called operator overloading.

So what happens when we use them with objects of a user-defined class? Let us consider the following class,
which tries to simulate a point in 2-D coordinate system.


Whoa! That's a lot of complains. TypeError was raised since Python didn't know how to add two Point objects together.

However, the good news is that we can teach this to Python through operator overloading.
But first, let's get a notion about special functions.
