To overload the + sign, we will need to implement __add__() function in the class.
With great power comes great responsibility. We can do whatever we like, inside this function.
But it is sensible to return a Point object of the coordinate sum.


Now let's try that addition again.

>>> p1 = Point(2,3)
>>> p2 = Point(-1,2)
>>> print(p1 + p2)
(1,5)


What actually happens is that, when you do p1 + p2, Python will call p1.__add__(p2) which in turn is Point.__add__(p1,p2).
Similarly, we can overload other operators as well. The special function that we need to implement is tabulated below.











Operator	                             Expression	                         Internally
Addition	                               p1 + p2	                       p1.__add__(p2)
Subtraction	                               p1 - p2	                       p1.__sub__(p2)
Multiplication	                           p1 * p2	                       p1.__mul__(p2)
Power	                                   p1 ** p2	                       p1.__pow__(p2)
Division	                               p1 / p2	                      p1.__truediv__(p2)
Floor Division	                           p1 // p2	                      p1.__floordiv__(p2)
Remainder (modulo)	                       p1 % p2	                        p1.__mod__(p2)
Bitwise Left Shift	                       p1 << p2	                       p1.__lshift__(p2)
Bitwise Right Shift	                       p1 >> p2	                       p1.__rshift__(p2)
Bitwise AND	                               p1 & p2	                        p1.__and__(p2)
Bitwise OR	                               p1 | p2	                        p1.__or__(p2)
Bitwise XOR	                               p1 ^ p2	                        p1.__xor__(p2)
Bitwise NOT	                                 ~p1	                        p1.__invert__()