In Python everything have some type associated with it.
For example if we have a variable having integer value then it’s type is int.
You can get type of anything using type() function.



Every type in Python is defined by Class:
So in above example, unlike C or Java where int, char, float are primary data types,
in Python they are object of int class or str class.
So we can make a new type by creating a class of that type.
For example we can create a new type Student by creating Student class.







A Class is also an object, and just like any other object it’s a instance of something
called Metaclass.
A special class type creates these Class object. The type class is default metaclass which
is responsible for making classes.
For example in above example if we try to find out the type of Student class, it comes
out to be a type.
Because Classes are also an object, they can be modified in same way.
We can add or subtract fields or methods in class in same way we did with other objects.












This whole meta thing can be summarized as – Metaclass create Classes and Classes
creates objects.
Metaclass is responsible for generation of classes,
o we can write our own custom metaclasses to modify the way classes are generated by performing extra actions or injecting code.
Usually we do not need custom metaclasses but sometime it’s necessary.
There are problems for which metaclass and non-metaclass based solutions are available (often simpler) but in some,
cases only metaclass can solve the problem. We will discuss such problem in this article.