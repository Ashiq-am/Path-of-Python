Some common function calls related to threading.Barrier class are:

1.Checking the state of the barrier:
broken: A boolean that is True if the barrier is in the broken state.
Syntax:
barrier.broken



2.parties: The number of threads required to pass the barrier.
Syntax:
barrier.parties



3.Aborting a barrier:
abort: Put the barrier into a broken state. This causes any active or future calls to wait() to fail with the BrokenBarrierError
Abort function calls on barrier are often required to skip the conditions of deadlocking during program execution.
Syntax:
barrier.abort()


4.Resetting the barrier:
reset: Return the barrier to the default, empty state. Any threads waiting on it will receive the BrokenBarrierError exception.
Syntax:
barrier.reset()



5.wait: Pass the barrier. When all the threads party to the barrier have called this function,
they are all released simultaneously. If a timeout is provided,
it is used in preference to any that was supplied to the class constructor.
The return value is an integer in the range 0 to parties â€“ 1, different for each thread.
If the call times out, the barrier is put into the broken state.
This method may raise a BrokenBarrierError exception if the barrier is broken or reset while a thread is waiting.

Syntax:
barrier.wait(timeout = None)



6.n_waiting: The number of threads currently waiting in the barrier.
Syntax:
barrier.n_waiting