The % operator can also be used for string formatting.
It interprets the left argument much like a printf()-style format string to be applied to the right
argument.

In Python, there is no printf() function but the functionality of the ancient printf is contained in
Python.
To this purpose, the modulo operator % is overloaded by the string class to perform string formatting.
Therefore, it is often called string modulo (or sometimes even called modulus) operator.


String modulo operator ( % ) is still available in Python(3.x) and user is using it widely.
But nowadays the old style of formatting is removed from the language.









There are two of those in our example: “%2d” and “%5.2f”. The general syntax for a format placeholder is:



%[flags][width][.precision]type



Let’s take a look at the placeholders in our example.



1.The first placeholder “%2d” is used for the first component of our tuple, i.e.
the integer 1. The number will be printed with 2 characters.
As 1 consists only of one digits, the output is padded with 1 leading blanks.



2.The second one “%8.2f” is a format description for a float number.
Like other placeholders, it is introduced with the % character.
This is followed by the total number of digits the string should contain.
This number includes the decimal point and all the digits, i.e. before and after the decimal point.



3.Our float number 05.333 has to be formatted with 5 characters.
The decimal part of the number or the precision is set to 2, i.e. the number following the “.” in our placeholder.
Finally, the last character “f” of our placeholder stands for “float”.