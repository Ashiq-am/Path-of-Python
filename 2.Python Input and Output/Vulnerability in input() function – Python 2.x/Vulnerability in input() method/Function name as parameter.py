# Python 2.x program to demonstrate input() function
# vulnerability by passing function name as parameter
secret_value = 500


# function that returns the secret value
def secretfunction():
    return secret_value


# using raw_input() to enter the number
input1 = raw_input("Raw_input(): Guess secret number: ")

# input1 will be explicitly converted to a string
if input1 == secret_value:
    print("You guessed correct")
else:
    print("wrong answer")

# using input() to enter the number
input2 = input("Input(): Guess the secret number: ")

# input2 is evaluated as it is entered
if input2 == secret_value:
    print("You guessed correct")
else:
    print("wrong answer")












"""In this set of input/output, we can see that when we use raw_input, we necessarily have to input the correct number. 
However while using the input() function, we can even provide the name of a function or variable, and the compiler will evaluate that.


Here for example, 
the input for input() function has been given as the name of a function ‘secretfunction()’. 
The compiler evaluates this function call and returns the secret number that we wish to find and hence our if condition 
evaluates to be true, even though we did not enter the secret number"""










'''As explained in first point, in this example also we were able to simply enter the variable name ‘secret_number’ in 
the input for ‘input()’ function and we were able to gain access to the secret value.


However while trying to call secretfunction() in the input for the raw_input() function, 
it gives us false as the compiler converts our argument to string, and doesn’t evaluate it as a function call.'''