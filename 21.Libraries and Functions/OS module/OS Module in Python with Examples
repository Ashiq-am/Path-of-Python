The OS module in python provides functions for interacting with the operating system.
OS, comes under Python’s standard utility modules. This module provides a portable way of using operating system
dependent functionality.

The *os* and *os.path* modules include many functions to interact with the file system.


Following are some functions in OS module:



1. os.name: This function gives the name of the operating system dependent module imported.
            The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’







2. os.getcwd(): Function os.getcwd(), returns the Current Working Directory(CWD) of the file used to
                execute the code, can vary from system to system.






3. os.error: All functions in this module raise OSError in the case of invalid or inaccessible file names and paths,
             or other arguments that have the correct type, but are not accepted by the operating system.
             os.error is an alias for built-in OSError exception.







                                             File Object Manipulation



4. os.popen(): This method opens a pipe to or from command. The return value can be read or written depending
               on whether mode is ‘r’ or ‘w’.

Syntax:


os.popen(command[, mode[, bufsize]])


Parameters mode & bufsize are not necessary parameters, if not provided, default ‘r’ is taken for mode.









5. os.close(): Close file descriptor fd. A file opened using open(), can be closed by close()only.
               But file opened through os.popen(), can be closed with close() or os.close().
               If we try closing a file opened with open(), using os.close(), Python would throw TypeError.








6. os.rename(): A file old.txt can be renamed to new.txt, using the function os.rename().
                The name of the file changes
                only if, the file exists and user has sufficient privilege permission to change the file.















Understanding the Output:

A file name “GFG.txt” exists, thus when os.rename() is used the first time,
the file gets renamed. Upon calling the function os.rename() second time, file “New.txt” exists and not “GFG.txt”
thus Python throws FileNotFoundError.