1. logical_and() :- This function computes digit-wise logical “and” operation of the number.
                     Digits can only have the values 0 or 1.




2. logical_or() :- This function computes digit-wise logical “or” operation of the number.
                   Digits can only have the values 0 or 1.




3. logical_xor() :- This function computes digit-wise logical “xor” operation of the number.
                     Digits can only have the values 0 or 1.




4. logical_invert() :- This function computes digit-wise logical “invert” operation of the number.
                       Digits can only have the values 0 or 1.






5. next_plus() :- This function returns the smallest number that can be represented, larger than the given number.





6. next_plus() :- This function returns the largest number that can be represented, smaller than the given number.






7. next_toward() :- This function returns the number nearest to the 1st argument in the direction of the
                    second argument. In case Both the numbers are equal, returns the 2nd number with the
                    sign of first number.





8. normalize() :- This function prints the number after erasing all the rightmost trailing zeroes in the number.





9. quantize() :- This function returns the 1st argument with the number of digits in decimal part(exponent)
                 shortened by the number of digits in decimal part(exponent) of 2nd argument.





10. same_quantum() :- This function returns 0 if both the numbers have different exponent and 1 if both
                      numbers have same exponent.






11. rotate() :- This function rotates the first argument by the amount mentioned in the second argument.
                If the sign of second argument is positive, rotation is towards left, else the rotation is towards right.
                The sign of first argument is unchanged.




12. shift() :- This function shifts the first argument by the amount mentioned in the second argument.
               If the sign of second argument is positive, shifting is towards left,
               else the shifting is towards right. The sign of first argument is unchanged.
               Digit shifted are replaced by 0.








13. remainder_near() :- Returns the value “1st – (n*2nd)” where n is the integer value nearest to the result
                        of 1st/2nd. If 2 integers have exactly similar proximity, even one is choosen.






14. scaleb() :- This function shifts the exponent of 1st number by the value of second argument.