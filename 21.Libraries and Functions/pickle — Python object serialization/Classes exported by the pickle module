1.class pickle.Pickler(file, protocol = None, *, fix_imports = True):-


This class takes a binary file for writing a pickle data stream.

*dump(obj) – This function is used to write a pickled representation of obj to the open file object given in the
              constructor.


*persistent_id(obj) – If persistent_id() returns None, obj is pickled as usual. This does nothing by deafult
                       and exists so that any subclass can override it.




*Dispatch_table – A pickler object’s dispatch table is a mapping whose keys are classes and whose values
                  are reduction functions.



By default, a pickler object will not have a dispatch_table attribute, and it will instead use the global
dispatch table managed by the copyreg module.



Example : The below code creates an instance of pickle.Pickler with a private dispatch table which handles
          the SomeClass class specially.





f = io.BytesIO()
p = pickle.Pickler(f)
p.dispatch_table = copyreg.dispatch_table.copy()
p.dispatch_table[SomeClass] = reduce_SomeClass





*Fast – The fast mode disables the usage of memo and speeds up the pickling process by not generating superfluous
         PUT opcodes.















2.class pickle.Unpickler(file, *, fix_imports = True, encoding = “ASCII”, errors = “strict”):-


This class takes a binary file for reading a pickle data stream.


*load() – This function is used to read a pickled object representation from the open file object file and
           return the reconstituted object hierarchy specified.


*persistent_load(pid) – This raises an UnpicklingError by default.


*find_class(module, name) – This function imports module if required and returns the object called name from it,
                            where the module and name arguments are str objects.