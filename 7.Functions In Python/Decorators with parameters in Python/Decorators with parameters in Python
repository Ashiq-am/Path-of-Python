Python functions are First Class citizens which means that functions can be treated similar to objects.

1.Function can be assigned to a variable i.e they can be referenced.
2.Function can be passed as an argument to another function.
3.Function can be returned from a function.



Decorators with parameters is similar to normal decorators.




Syntax for decorators with parameters

@decorator(params)
def func_name():
    ''' Function implementation'''






The above code is equivalent to

def func_name():
    ''' Function implementation'''

func_name = (decorator(params))(func_name)
"""









As the execution starts from left to right decorator(params) is called which returns a function object fun_obj.
Using the fun_obj the call fun_obj(fun_name) is made.
Inside the inner function, required operations are performed and the actual function reference is returned which will be
assigned to func_name. Now, func_name() can be used to call the function with decorator applied on it.