Suppose we to create a stream of Fibonacci numbers, adopting the generator approach makes it trivial;
we just have to call next(x) to get the next Fibonacci number without bothering about where or
when the stream of numbers ends.


A more practical type of stream processing is handling large data files such as log files.
Generators provide a space efficient method for such data processing as only parts of the file are handled
at one given point in time. We can also use Iterators for these purposes, but Generator provides a quick way
(We donâ€™t need to write __next__ and __iter__ methods here).