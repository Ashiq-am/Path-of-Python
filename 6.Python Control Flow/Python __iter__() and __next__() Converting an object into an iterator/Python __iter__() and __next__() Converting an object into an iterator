At many instances, we get a need to access an object like an iterator.
One way is to form a generator loop but that extends the task and time taken by the programmer.

Python eases this task by providing a built-in method __iter__() for this task.

The __iter__() function returns an iterator for the given object (array, set, tuple etc. or custom objects).
It creates an object that can be accessed one element at a time using __next__() function,
which generally comes in handy when dealing with loops.



Syntax :


iter(object)
iter(callable, sentinel)









1.Object : The object whose iterator has to be created.
It can be a collection object like list or tuple or a user-defined object (using OOPS).


2.Callable,Sentinel : Callable represents a callable object and sentinel is the value at which the iteration
is needed to be terminated, sentinel value represents the end of sequence being iterated.





Exception :

If we call the iterator after all the elements have
been iterated, then StopIterationError is raised.



The __iter__() function returns an iterator object that goes through the each element of the given object.
The next element can be accessed through __next__() function.
In the case of callable object and sentinel value, the iteration is done until the value is found or
the end of elements reached. In any case, the original object is not modified.